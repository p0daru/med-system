// src/components/CasualtyCard/VitalSignsSection.jsx
import React, { useCallback } from 'react'; // Removed useEffect, useMemo, useForm, FormProvider
import { useFormContext, useFieldArray } from 'react-hook-form'; // Import useFormContext, useFieldArray
// Removed yup/yupResolver imports - validation happens in parent or not at all here
import { Box, Button, HStack, Text, VStack } from '@chakra-ui/react';
import { AddIcon } from '@chakra-ui/icons';

// Import child component and helpers/styles
// Removed validationSchema import
import VitalSignsRow from './VitalSignsRow'; // Assuming VitalSignsRow is adapted
import { getCurrentTime } from '../../../utils/helpers'; // Verify path
import { vitalSectionStyles as styles } from '../styles'; // Verify path

// REMOVE 'data' and 'setFormData' props
// ADD 'constants' prop if needed by VitalSignsRow (e.g., for AVPU options)
function VitalSignsSection({ isDisabled, constants }) {
    // Get methods from PARENT's form via context
    const { control, formState: { errors } /* Add other methods if needed */ } = useFormContext();

    // --- useFieldArray Setup ---
    // Get 'control' from context
    const { fields, append, remove } = useFieldArray({
        control, // Use control from useFormContext
        name: "vitalSigns" // Matches the array name in parent's state/initialDataState
    });

    // --- NO Local RHF Setup ---
    // --- NO Sync Effects ---

    // --- Add Row Handler ---
    const addVitalRow = useCallback(() => {
        const newRow = {
            // id is generated by RHF automatically for useFieldArray unless you provide one
            // id: crypto.randomUUID(), // RHF handles internal keying, but providing an ID can be useful for DB later
            time: getCurrentTime(), // Pre-fill time
            pulse: '', bp: '', rr: '', spO2: '', avpu: '', pain: ''
        };
        // Append the new row object to the 'vitalSigns' array in the PARENT form state
        append(newRow, { shouldFocus: false });
    }, [append]);

    // --- Styling ---
    const noEntriesTextStyle = {
        ...styles.noEntriesText,
        color: isDisabled ? "gray.400" : "gray.500",
    };

    // --- Rendering ---
    // NO FormProvider wrapper needed
    return (
        <Box>
            <HStack {...styles.headerHStack}>
                 <Button leftIcon={<AddIcon />} onClick={addVitalRow} isDisabled={isDisabled} {...styles.addVitalButton}>
                    Додати Запис Показників
                 </Button>
            </HStack>
            <VStack {...styles.listVStack}>
                 {fields.length === 0 && !isDisabled && (
                    <Text {...noEntriesTextStyle}>
                        Немає записів. Натисність "+ Додати Запис Показників", щоб додати.
                    </Text>
                 )}
                {/* Map over 'fields' provided by useFieldArray */}
                {fields.map((field, index) => (
                     <VitalSignsRow
                        // key={field.id} is crucial for React list rendering
                        key={field.id}
                        // Pass index for registering fields within the row
                        index={index}
                        // fieldId is likely not needed if VitalSignsRow uses index for registration
                        // fieldId={field.id}
                        // Pass remove function with the correct index
                        remove={() => remove(index)}
                        isDisabled={isDisabled}
                        // Pass constants down if VitalSignsRow needs them (e.g., AVPU options)
                        constants={constants}
                     />
                ))}
                 {/* Display array-level errors if any */}
                 {errors.vitalSigns?.root?.message && (
                    <Text color="red.500" mt={2} fontSize="sm">
                        {errors.vitalSigns.root.message}
                    </Text>
                 )}
            </VStack>
        </Box>
    );
}

export default VitalSignsSection;